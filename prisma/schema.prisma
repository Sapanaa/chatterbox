generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id 
  email         String    @unique
  name          String?
  emailVerified Boolean
  image         String?
  servers       Server[]
  members       Member[]
  channels      Channel[]
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  @@map("user")
}



model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}


model Server {
  id         String   @id @default(uuid())
  name       String
  imageUrl   String
  inviteCode String
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  members    Member[]
  channels   Channel[]  

  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt

  @@index([userId])
}


enum MemberRole{
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id String @id
  role MemberRole @default(GUEST)

  userId String 
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  serverId String
  server                  Server      @relation(fields: [serverId], references: [id], onDelete: Cascade)

  createdAt  DateTime?
  updatedAt  DateTime?
  @@index([userId])
  @@index([serverId])

}


enum ChannelType{
  TEXT 
  AUDIO
  VIDEO
}

model Channel {
  id String @id
  name String
  type ChannelType @default(TEXT)

  userId String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  serverId String
  server                  Server      @relation(fields: [serverId], references: [id], onDelete: Cascade)
  createdAt  DateTime?
  updatedAt  DateTime?  

  @@index([userId])
  @@index([serverId])

}